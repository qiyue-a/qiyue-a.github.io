<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>某行学习笔记</title>
    <link href="/2023/10/30/%E6%9F%90%E8%A1%8C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/10/30/%E6%9F%90%E8%A1%8C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>来看看某行的加密<br>链接：aHR0cDovL3d3dy5wYmMuZ292LmNuLw&#x3D;&#x3D;</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><ol><li>请求分析</li><li>逆向分析</li><li>测试结果</li></ol><h1 id="请求分析"><a href="#请求分析" class="headerlink" title="请求分析"></a>请求分析</h1><p>打开网页，F12打开开发者工具，依次点击Application&#x3D;&#x3D;》Storage&#x3D;&#x3D;》Clear site data，清除缓存<br><img src="/./picture/%E6%89%93%E5%BC%80%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7.png" alt="打开开发者工具.png"><br>刷新后可以看到进入了debugger，选中debugger所在行，右键选择Never Parse Here跳过debugger<br><img src="/./picture/debugger.png" alt="debugger.png"><br>回到Network项，可以看到有三个包是很可疑的，估计就是先发送一次请求，然后验证了某个东西，之后才是真正的数据包，可以看到第三个包才有数据返回；我也勾选了Preserve log和Disable cache两个选项，这两个分别是保留抓包和禁止缓存，都可以先勾上<br><img src="/./picture/%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90.png" alt="抓包分析.png"><br>看了下，第三个包没有什么可疑的参数，那可能就是cookies的问题了，可以全局搜一下cookies的值，只有第二个包set-cookies的<br><img src="/./picture/%E5%8F%82%E6%95%B0%E5%88%86%E6%9E%90.png" alt="参数分析.png"><br>再看第二个包，可以看到url上带有一个不明字符串和一个可疑参数wzwschallenge，全局搜索都是没有的，同时这个包是document发的包，那就好玩了<br><img src="/./picture/%E5%8F%82%E6%95%B0%E5%88%86%E6%9E%901.png" alt="参数分析1.png"><br>掏出我们的小花瓶，重新抓包看一下，这里说一下，浏览器抓到的包都是经过处理的，只有抓包工具抓到的才是真正返回的响应；重新抓包后搜索可以看到，在第一个包的响应中返回了这个可疑的url值<br><img src="/./picture/charles%E6%8A%93%E5%8C%85.png" alt="charles抓包.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>请求的流程大概就是：</p><ol><li>第一个先发送请求，响应返回一大堆js</li><li>然后由js生成第二个请求的url值和参数，响应set-cookies了</li><li>最后第三个请求带着第二个数据包set的cookies请求获得数据</li></ol><h1 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h1><p>直接把第二个请求返回的js复制到vscode中，大概长这样子；一般document返回的js代码是可以直接运行的，可以直接跑一下，会有个报错说缺个window，在顶部补全个var window &#x3D; {}; 就行，因为他操作了window，那我也在尾部直接打印个window看看做了什么操作<br><img src="/./picture/js%E4%BB%A3%E7%A0%81.png" alt="js代码.png"><br>惊喜来得太突然，他这就直接返回了第二个请求所需要的东西了<br><img src="/./picture/%E8%A1%A5%E7%8E%AF%E5%A2%83.png" alt="补环境.png"><br>ok，我们继续研究他到底是怎样加密的；一般像这样压缩过的js代码，都比较难看出运行，就会习惯性格式化一下，但是注意，这个代码格式化后运行导致栈溢出的，这样子就是检测了格式化了，而格式化通常是通过正则匹配去检测的，可以直接搜索RegExp，为了分析代码，还是要先格式化后才能阅读，但是记住格式化后就别运行了，会直接卡死的，搜索后可以看到就是检测了EHgJgn这个方法<br><img src="/./picture/%E6%89%BE%E6%AD%A3%E5%88%99.png" alt="找正则.png"><br>接下来直接进入调试，看看到底是检测了多少，可以在之前那一行代码前打上debugger; 然后新开一个浏览器运行，新开别的浏览器主要是为了仿真栈溢出导致原来的浏览器卡死，可以直接在console上直接粘贴运行<br><img src="/./picture/%E6%89%8B%E5%8A%A8%E6%96%AD%E7%82%B9.png" alt="手动断点.png"><br>可以看到浏览器已经在debugger上停止了，直接在浏览器上搜索RegExp，并且都打上断点，点击跳到下一个断点就可以分析正则是怎样检测的了<br><img src="/./picture/%E5%88%86%E6%9E%90%E6%AD%A3%E5%88%99.png" alt="分析正则.png"><br>可以看到就检测了函数是否格式化了<br><img src="/./picture/%E6%A3%80%E6%9F%A5%E6%A0%BC%E5%BC%8F%E5%8C%96.png" alt="检查格式化.png"><br>接下来就是一步一步的去修改检测的点了，把检测的函数在自己的编辑器上都取消格式化，然后就会到对很长的一个函数的检测，这个取消不了格式化，就把编辑器上的这个！取反给去掉了过了这里的检测<br><img src="/./picture/%E6%A3%80%E6%9F%A5%E6%A0%BC%E5%BC%8F%E5%8C%961.png" alt="检查格式化1.png"><br>然后！我把所有可以搜索到的格式化检测过掉后还是会出现栈溢出！彪得太厉害了，我直接把他停了<br><img src="/./picture/%E7%9C%8B%E5%86%85%E5%AD%98.png" alt="看内存.png"><br>其实栈溢出主要的原因就是一些死循环或者是函数互调，把可以看到的检测过掉后还会有，那就说明还有一些字符换算后再用正则匹配去检测的，但是这样子找太难找了，要一步一步的去跟，tmd，我直接找加密的，赋值了window，那肯定调用了get的了，可以直接hook了，但是我一搜索就有找到了window，那直接下debugger;然后跟调试了<br><img src="/./picture/%E5%BF%AB%E9%80%9F%E5%88%86%E6%9E%90.png" alt="快速分析.png"><br><img src="/./picture/%E6%89%BEwindow.png" alt="找window.png"><br>放到浏览器上运行，就可以看到加密的地方了，手动还原一下这些没什么好说的了，都是时间活，可惜我ast学得不咋滴，哭死；再跟一下就可以找到加密的算法了，他加密算法不算难，难得是各种检测，反正暴力一点的就是直接在源代码上下debugger;这样就可以理清他逻辑了<br><img src="/./picture/%E9%80%BB%E8%BE%91%E6%A2%B3%E7%90%86.png" alt="逻辑梳理.png"><br>ok，不想继续跟了，就到这吧，有需要算法源码的找我聊</p><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>这个其实就是sojson的加密，主要做了的事情就是代码混淆、格式化检测、死代码注入等等，加密的算法不算难</p><h1 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h1><p><img src="/./picture/%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" alt="测试结果.png"><br>成功率测试：<br><img src="/./picture/%E6%88%90%E5%8A%9F%E7%8E%87.png" alt="成功率.png"></p>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
      <category>web逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
      <tag>web逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/10/29/hello-world/"/>
    <url>/2023/10/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
