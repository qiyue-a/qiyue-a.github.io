<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>某行学习笔记</title>
    <link href="/2023/10/30/%E6%9F%90%E8%A1%8C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/10/30/%E6%9F%90%E8%A1%8C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>来看看某行的加密<br>链接：aHR0cDovL3d3dy5wYmMuZ292LmNuLw&#x3D;&#x3D;</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><ol><li>请求分析</li><li>逆向分析</li><li>测试结果</li></ol><h1 id="请求分析"><a href="#请求分析" class="headerlink" title="请求分析"></a>请求分析</h1><p>打开网页，F12打开开发者工具，依次点击Application&#x3D;&#x3D;》Storage&#x3D;&#x3D;》Clear site data，清除缓存<br><img src="https://cdn.nlark.com/yuque/0/2023/png/12686748/1680185098490-47d6b13f-4f29-478c-a40a-1724ee86a106.png#averageHue=%23fcf8f3&clientId=u1763203b-345c-4&from=paste&height=788&id=u7be9016f&originHeight=887&originWidth=1500&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=135792&status=done&style=none&taskId=ud7c9bf20-2ac7-4402-a175-093f3858bad&title=&width=1333.3333333333333" alt="image.png"><br>刷新后可以看到进入了debugger，选中debugger所在行，右键选择Never Parse Here跳过debugger<br><img src="https://cdn.nlark.com/yuque/0/2023/png/12686748/1680185434780-6c2a2787-6e8b-47de-8234-f7b9e5ef2f47.png#averageHue=%23e9e7e6&clientId=u1763203b-345c-4&from=paste&height=793&id=u069b1f52&originHeight=892&originWidth=1920&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=84362&status=done&style=none&taskId=u1004324e-e1b0-4dc7-b704-1a73b5e23f1&title=&width=1706.6666666666667" alt="image.png"><br>回到Network项，可以看到有三个包是很可疑的，估计就是先发送一次请求，然后验证了某个东西，之后才是真正的数据包，可以看到第三个包才有数据返回；我也勾选了Preserve log和Disable cache两个选项，这两个分别是保留抓包和禁止缓存，都可以先勾上<br><img src="https://cdn.nlark.com/yuque/0/2023/png/12686748/1680185934185-22ea9a7e-5367-40ff-a8dc-0bc1699b26bc.png#averageHue=%23f9f1d5&clientId=u1763203b-345c-4&from=paste&height=783&id=u4fe4c70b&originHeight=881&originWidth=1486&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=144106&status=done&style=none&taskId=u6c0d04ce-2b87-49cd-829f-2a3b20200ad&title=&width=1320.888888888889" alt="image.png"><br>看了下，第三个包没有什么可疑的参数，那可能就是cookies的问题了，可以全局搜一下cookies的值，只有第二个包set-cookies的<br><img src="https://cdn.nlark.com/yuque/0/2023/png/12686748/1680186028961-39da7701-aa3d-40df-9515-f5edb03c4b29.png#averageHue=%23f8efd2&clientId=u1763203b-345c-4&from=paste&height=785&id=u6bca9240&originHeight=883&originWidth=1461&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=163120&status=done&style=none&taskId=ubcf8e5bc-b15d-486e-bb7f-b971c809365&title=&width=1298.6666666666667" alt="image.png"><br>再看第二个包，可以看到url上带有一个不明字符串和一个可疑参数wzwschallenge，全局搜索都是没有的，同时这个包是document发的包，那就好玩了<br><img src="https://cdn.nlark.com/yuque/0/2023/png/12686748/1680186688212-93bb6c5c-8e67-4442-be3f-25825a016328.png#averageHue=%23e3c18b&clientId=u1763203b-345c-4&from=paste&height=788&id=u7f1a1e52&originHeight=886&originWidth=1476&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=93158&status=done&style=none&taskId=uc46be17b-760a-4ef5-85cf-2f3b1c0ec3b&title=&width=1312" alt="image.png"><br>掏出我们的小花瓶，重新抓包看一下，这里说一下，浏览器抓到的包都是经过处理的，只有抓包工具抓到的才是真正返回的响应；重新抓包后搜索可以看到，在第一个包的响应中返回了这个可疑的url值<br><img src="https://cdn.nlark.com/yuque/0/2023/png/12686748/1680187092616-c6390e0d-fffd-4f46-b068-5d0ff8c933b0.png#averageHue=%23eeedec&clientId=u1763203b-345c-4&from=paste&height=426&id=u547633f1&originHeight=479&originWidth=933&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=52615&status=done&style=none&taskId=ua574e150-f231-4f4e-96f5-701b4ebd6bc&title=&width=829.3333333333334" alt="image.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>请求的流程大概就是：</p><ol><li>第一个先发送请求，响应返回一大堆js</li><li>然后由js生成第二个请求的url值和参数，响应set-cookies了</li><li>最后第三个请求带着第二个数据包set的cookies请求获得数据</li></ol><h1 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h1><p>直接把第二个请求返回的js复制到vscode中，大概长这样子；一般document返回的js代码是可以直接运行的，可以直接跑一下，会有个报错说缺个window，在顶部补全个var window &#x3D; {}; 就行，因为他操作了window，那我也在尾部直接打印个window看看做了什么操作<br><img src="https://cdn.nlark.com/yuque/0/2023/png/12686748/1680187435847-c9191469-ef91-41c2-9f84-83266cb97c0c.png#averageHue=%23484d49&clientId=u1763203b-345c-4&from=paste&height=783&id=u07b0f395&originHeight=881&originWidth=1434&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=1082455&status=done&style=none&taskId=u55690d45-71b2-41c5-8e51-93c00d0723e&title=&width=1274.6666666666667" alt="image.png"><br>惊喜来得太突然，他这就直接返回了第二个请求所需要的东西了<br><img src="https://cdn.nlark.com/yuque/0/2023/png/12686748/1680188048586-c386ebe0-c656-40d2-a862-26b50a33018d.png#averageHue=%233a3c3a&clientId=u1763203b-345c-4&from=paste&height=797&id=u307eb78e&originHeight=897&originWidth=1491&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=962980&status=done&style=none&taskId=ub736ae06-cbf2-4906-a46e-3859e72e936&title=&width=1325.3333333333333" alt="image.png"><br>ok，我们继续研究他到底是怎样加密的；一般像这样压缩过的js代码，都比较难看出运行，就会习惯性格式化一下，但是注意，这个代码格式化后运行导致栈溢出的，这样子就是检测了格式化了，而格式化通常是通过正则匹配去检测的，可以直接搜索RegExp，为了分析代码，还是要先格式化后才能阅读，但是记住格式化后就别运行了，会直接卡死的，搜索后可以看到就是检测了EHgJgn这个方法<br><img src="https://cdn.nlark.com/yuque/0/2023/png/12686748/1680528670387-cf88d30d-bb57-4556-bf44-d1b47a9fbbc9.png#averageHue=%23333633&clientId=u1763203b-345c-4&from=paste&height=844&id=u45d2ff1d&originHeight=949&originWidth=1417&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=686887&status=done&style=none&taskId=u1d7ebe19-a5d2-454c-9b9f-8f051677779&title=&width=1259.5555555555557" alt="image.png"><br>接下来直接进入调试，看看到底是检测了多少，可以在之前那一行代码前打上debugger; 然后新开一个浏览器运行，新开别的浏览器主要是为了仿真栈溢出导致原来的浏览器卡死，可以直接在console上直接粘贴运行<br><img src="https://cdn.nlark.com/yuque/0/2023/png/12686748/1680528937623-43f142b1-c1a4-406b-a5ed-e0b953dbc893.png#averageHue=%2347433a&clientId=u1763203b-345c-4&from=paste&height=253&id=u8f341cc8&originHeight=285&originWidth=808&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=129392&status=done&style=none&taskId=u08e1fb2d-6512-4c31-8dd9-320aa5213ab&title=&width=718.2222222222222" alt="image.png"><br>可以看到浏览器已经在debugger上停止了，直接在浏览器上搜索RegExp，并且都打上断点，点击跳到下一个断点就可以分析正则是怎样检测的了<br><img src="https://cdn.nlark.com/yuque/0/2023/png/12686748/1680529250585-7d1e8dff-a357-43c9-84e4-11c5bfee3afc.png#averageHue=%23e1dcda&clientId=u1763203b-345c-4&from=paste&height=782&id=u1da7004f&originHeight=880&originWidth=1292&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=301930&status=done&style=none&taskId=u3114b02d-6eac-4106-a39c-da3c728284a&title=&width=1148.4444444444443" alt="image.png"><br>可以看到就检测了函数是否格式化了<br><img src="https://cdn.nlark.com/yuque/0/2023/png/12686748/1680529339798-1b2bb233-5004-48e6-aac7-2cede0cd1645.png#averageHue=%23e1dddb&clientId=u1763203b-345c-4&from=paste&height=782&id=ud76b7093&originHeight=880&originWidth=1292&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=304882&status=done&style=none&taskId=u85286227-a543-4c49-9204-fe2b8066115&title=&width=1148.4444444444443" alt="image.png"><br>接下来就是一步一步的去修改检测的点了，把检测的函数在自己的编辑器上都取消格式化，然后就会到对很长的一个函数的检测，这个取消不了格式化，就把编辑器上的这个！取反给去掉了过了这里的检测<br><img src="https://cdn.nlark.com/yuque/0/2023/png/12686748/1680529843569-05ae3594-7c24-42d7-9e20-2f7dc73f149d.png#averageHue=%23f8f3f2&clientId=u1763203b-345c-4&from=paste&height=792&id=u98a14310&originHeight=891&originWidth=1570&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=203224&status=done&style=none&taskId=u906c6cbe-2359-421d-a440-9a7dfcc2eea&title=&width=1395.5555555555557" alt="image.png"><br>然后！我把所有可以搜索到的格式化检测过掉后还是会出现栈溢出！彪得太厉害了，我直接把他停了<br><img src="https://cdn.nlark.com/yuque/0/2023/png/12686748/1680530767102-30671430-9ce2-4f7f-95f7-32c56211aafa.png#averageHue=%23f9f7f6&clientId=u1763203b-345c-4&from=paste&height=200&id=u7f51e25a&originHeight=225&originWidth=815&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=25224&status=done&style=none&taskId=u72194d43-01cb-479a-b1a4-485a156bbec&title=&width=724.4444444444445" alt="image.png"><br>其实栈溢出主要的原因就是一些死循环或者是函数互调，把可以看到的检测过掉后还会有，那就说明还有一些字符换算后再用正则匹配去检测的，但是这样子找太难找了，要一步一步的去跟，tmd，我直接找加密的，赋值了window，那肯定调用了get的了，可以直接hook了，但是我一搜索就有找到了window，那直接下debugger;然后跟调试了<br><img src="https://cdn.nlark.com/yuque/0/2023/png/12686748/1680531197776-232065d5-e473-4c03-91a2-65c1481ab4c4.png#averageHue=%23353632&clientId=u1763203b-345c-4&from=paste&height=787&id=u18f12fc1&originHeight=885&originWidth=1289&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=597181&status=done&style=none&taskId=u9b0feb6a-ff63-4ca0-b47c-ef55edafb28&title=&width=1145.7777777777778" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/12686748/1680531448971-53bde2b3-59dd-4a39-be4e-108a63c2792b.png#averageHue=%234d4e4b&clientId=u1763203b-345c-4&from=paste&height=619&id=uafb3e7a9&originHeight=696&originWidth=1319&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=710988&status=done&style=none&taskId=ucdc717bf-40a0-4ef2-a9c1-ea849bd417a&title=&width=1172.4444444444443" alt="image.png"><br>放到浏览器上运行，就可以看到加密的地方了，手动还原一下这些没什么好说的了，都是时间活，可惜我ast学得不咋滴，哭死；再跟一下就可以找到加密的算法了，他加密算法不算难，难得是各种检测，反正暴力一点的就是直接在源代码上下debugger;这样就可以理清他逻辑了<br><img src="https://cdn.nlark.com/yuque/0/2023/png/12686748/1680531690096-4210a284-2121-400e-8cfe-48319fa85ab5.png#averageHue=%23f8f0ef&clientId=u1763203b-345c-4&from=paste&height=775&id=u9e02205c&originHeight=872&originWidth=1557&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=188066&status=done&style=none&taskId=u400e7a9a-24c1-4522-96c0-52736e4ef75&title=&width=1384" alt="image.png"><br>ok，不想继续跟了，就到这吧，有需要算法源码的找我聊</p><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>这个其实就是sojson的加密，主要做了的事情就是代码混淆、格式化检测、死代码注入等等，加密的算法不算难</p><h1 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/12686748/1680532145247-ab653412-c2c0-47c7-9dbf-9c981b390136.png#averageHue=%23353936&clientId=u1763203b-345c-4&from=paste&height=793&id=u572298d9&originHeight=892&originWidth=1463&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=647351&status=done&style=none&taskId=u55887661-6542-4871-b57f-ff28e352d09&title=&width=1300.4444444444443" alt="image.png"><br>成功率测试：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/12686748/1680533469542-cfac6b58-5718-4651-9db2-943dd4844103.png#averageHue=%23404740&clientId=u1763203b-345c-4&from=paste&height=773&id=u7be95e07&originHeight=870&originWidth=1444&originalType=binary&ratio=1.125&rotation=0&showTitle=false&size=730686&status=done&style=none&taskId=ubaf5718b-c00f-4c7a-abff-344b4267994&title=&width=1283.5555555555557" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
      <category>web逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
      <tag>web逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/10/29/hello-world/"/>
    <url>/2023/10/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
